package com.monoid.hackernews.ksp.screenshot

import com.google.devtools.ksp.getVisibility
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.Resolver
import com.google.devtools.ksp.processing.SymbolProcessor
import com.google.devtools.ksp.processing.SymbolProcessorEnvironment
import com.google.devtools.ksp.processing.SymbolProcessorProvider
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSFile
import com.google.devtools.ksp.symbol.KSFunctionDeclaration
import com.google.devtools.ksp.symbol.Visibility
import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import java.io.File
import java.io.OutputStream
import java.io.OutputStreamWriter

class ScreenshotKspProcessor(
    environment: SymbolProcessorEnvironment,
) : SymbolProcessor {
    private val codeGenerator = environment.codeGenerator

    override fun process(resolver: Resolver): List<KSAnnotated> {
        resolver
            .getSymbolsWithAnnotation(PREVIEW.canonicalName)
            .filterIsInstance<KSFunctionDeclaration>()
            .filter { ksFunctionDeclaration ->
                when (ksFunctionDeclaration.getVisibility()) {
                    Visibility.INTERNAL,
                    Visibility.PUBLIC,
                        -> ksFunctionDeclaration.parameters.isEmpty()

                    else -> false
                }
            }
            .groupBy { it.containingFile }
            .forEach { (ksFile, ksFunctionDeclarations) ->
                val fileSpec = checkNotNull(ksFile).toScreenshotTestFileSpec(ksFunctionDeclarations)
                OutputStreamWriter(
                    codeGenerator::class.java
                        .getDeclaredMethod(
                            "createNewFile",
                            Dependencies::class.java,
                            String::class.java,
                            File::class.java,
                        )
                        .apply { isAccessible = true }
                        .invoke(
                            codeGenerator,
                            Dependencies(false, ksFile),
                            fileSpec.name,
                            File(
                                run {
                                    codeGenerator::class.java
                                        .getDeclaredMethod(
                                            "extensionToDirectory",
                                            String::class.java,
                                        )
                                        .apply { isAccessible = true }
                                        .invoke(codeGenerator, "kotlin") as File
                                }.parentFile,
                                "screenshotTest/${fileSpec.packageName.replace('.', '/')}",
                            ),
                        ) as OutputStream,
                    Charsets.UTF_8,
                ).use(fileSpec::writeTo)
            }
        return emptyList()
    }

    class Factory : SymbolProcessorProvider {
        override fun create(environment: SymbolProcessorEnvironment): SymbolProcessor =
            ScreenshotKspProcessor(environment)
    }
}

private fun KSFile.toScreenshotTestFileSpec(
    ksFunctionDeclarations: List<KSFunctionDeclaration>,
): FileSpec {
    val testClassName = "${fileName.removeSuffix(".kt").removeSuffix(".android")}ScreenshotTest"
    return FileSpec
        .builder(packageName.asString(), "$testClassName.kt")
        .addImport("androidx.compose.runtime", "CompositionLocalProvider")
        .addImport("androidx.compose.ui.platform", "LocalInspectionMode")
        .addImport("org.jetbrains.compose.resources", "PreviewContextConfigurationEffect")
        .addImport("org.jetbrains.compose.resources", "ExperimentalResourceApi")
        .addImportClass(ClassName("androidx.compose.ui.test.junit4", "createComposeRule"))
        .addImportClass(ClassName("androidx.compose.ui.test", "onRoot"))
        .addImportClass(ClassName("com.github.takahirom.roborazzi", "captureRoboImage"))
        .addImportClass(ClassName("org.robolectric", "RobolectricTestRunner"))
        .addImport(GRAPHICS_MODE_MODE, "NATIVE")
        .addImportClass(ClassName("com.github.takahirom.roborazzi", "RoborazziOptions"))
        .addImportClass(ClassName("com.dropbox.differ", "SimpleImageComparator"))
        .indent("    ")
        .addFileComment("Code generated by $PROCESSOR_NAME. Do not edit.")
        .addType(
            TypeSpec
                .classBuilder(testClassName)
                .addAnnotation(
                    AnnotationSpec
                        .builder(RUN_WITH)
                        .addMember("RobolectricTestRunner::class")
                        .build(),
                )
                .addAnnotation(
                    AnnotationSpec
                        .builder(GRAPHICS_MODE)
                        .addMember("NATIVE")
                        .build(),
                )
                .apply {
                    val composeTestRule = "composeTestRule"
                    addProperty(
                        PropertySpec
                            .builder(composeTestRule, COMPOSE_CONTENT_TEST_RULE)
                            .addAnnotation(
                                AnnotationSpec
                                    .builder(RULE)
                                    .useSiteTarget(AnnotationSpec.UseSiteTarget.GET)
                                    .build(),
                            )
                            .initializer("createComposeRule()")
                            .build()
                    )
                    val roborazziRule = "roborazziRule"
                    addProperty(
                        PropertySpec
                            .builder(roborazziRule, ROBORAZZI_RULE)
                            .addAnnotation(
                                AnnotationSpec
                                    .builder(RULE)
                                    .useSiteTarget(AnnotationSpec.UseSiteTarget.GET)
                                    .build(),
                            )
                            .initializer(
                                """
                                    RoborazziRule(
                                        options = RoborazziRule.Options(
                                            roborazziOptions = RoborazziOptions(
                                                compareOptions = RoborazziOptions.CompareOptions(
                                                    imageComparator = SimpleImageComparator(
                                                        maxDistance = 0.0021f,
                                                    ),
                                                ),
                                            ),
                                        ),
                                    )
                                """.trimIndent(),
                            )
                            .build(),
                    )
                    ksFunctionDeclarations.forEach { ksFunctionDeclaration ->
                        addFunction(
                            FunSpec
                                .builder("${ksFunctionDeclaration.simpleName.asString()} Screenshot")
                                .addAnnotation(TEST)
                                .addStatement(
                                    """
                                        composeTestRule.run {                                       
                                            setContent {
                                                CompositionLocalProvider(LocalInspectionMode provides true) {
                                                    @OptIn(ExperimentalResourceApi::class)
                                                    PreviewContextConfigurationEffect()
                                                    ${ksFunctionDeclaration.simpleName.asString()}()
                                                }
                                            }
                                            onRoot().captureRoboImage()
                                        }
                                    """.trimIndent(),
                                )
                                .build(),
                        )
                    }
                }
                .build()
        )
        .build()
}

private fun FileSpec.Builder.addImportClass(className: ClassName): FileSpec.Builder {
    return addImport(className.packageName, className.simpleName)
}

private const val PROCESSOR_NAME = "ScreenshotKspProcessor"

private val TEST =
    ClassName("kotlin.test", "Test")
private val RULE =
    ClassName("org.junit", "Rule")
private val RUN_WITH =
    ClassName("org.junit.runner", "RunWith")
private val PREVIEW =
    ClassName("org.jetbrains.compose.ui.tooling.preview", "Preview")
private val COMPOSE_CONTENT_TEST_RULE =
    ClassName("androidx.compose.ui.test.junit4", "ComposeContentTestRule")
private val GRAPHICS_MODE =
    ClassName("org.robolectric.annotation", "GraphicsMode")
private val GRAPHICS_MODE_MODE =
    ClassName("org.robolectric.annotation", "GraphicsMode.Mode")
private val ROBORAZZI_RULE =
    ClassName("com.github.takahirom.roborazzi", "RoborazziRule")
